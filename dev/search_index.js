var documenterSearchIndex = {"docs":
[{"location":"#OkImageCropper","page":"Home","title":"OkImageCropper","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OkImageCropper.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#OkImageCropper.crop_whitespace-Tuple{String, String}","page":"Home","title":"OkImageCropper.crop_whitespace","text":"crop_whitespace(input_path::String, output_path::String; padding::Int=0, target_color=nothing)\n\nCrops the white (or specified target_color) empty spaces from an image.\n\nThe function identifies the bounding box of pixels that are not white (or not the target_color) and then crops the image to this bounding box, optionally adding some padding.\n\nArguments\n\ninput_path::String: Path to the input image file (e.g., PNG).\noutput_path::String: Path to save the cropped image.\npadding::Int=0: Optional padding (in pixels) to add around the cropped content.\ntarget_color::Union{Nothing, RGBX, Gray}=nothing: Optional. The color to treat as background. If nothing (default), it will use the is_white function to detect white pixels. You can provide a specific RGB or Gray color to be cropped. For example, RGB{N0f8}(1.0,1.0,1.0) for white.\n\nReturns\n\nBool: true if cropping was successful and the file was saved, false otherwise.\n\nExample\n\nusing OkImageCropper\n\n# Crop white space from input.png and save to output.png\ncrop_whitespace(\"input.png\", \"output.png\")\n\n# Crop with a 10-pixel padding\ncrop_whitespace(\"input.png\", \"output_padded.png\", padding=10)\n\n# Crop a specific background color (e.g., light gray if it was N0f8)\n# using Images\n# crop_whitespace(\"input.png\", \"output_gray_bg.png\", target_color=RGB{N0f8}(0.9,0.9,0.9))\n\n\n\n\n\n","category":"method"},{"location":"#OkImageCropper.is_white-Tuple{Union{ColorTypes.AbstractRGB, ColorTypes.RGBA}}","page":"Home","title":"OkImageCropper.is_white","text":"is_white(pixel::AbstractRGB)\nis_white(pixel::RGBA)\nis_white(pixel::Gray)\n\nChecks if a pixel is white. For RGB types, it checks if R, G, and B components are at their maximum (typically 1.0 or 255). For RGBA types, it checks if R, G, and B components are at their maximum, ignoring alpha. For Gray types, it checks if the gray value is at its maximum.\n\n\n\n\n\n","category":"method"}]
}
